# Definir la liste des services (container) dont nous aurons besoin

services:
  # Definition du container contenant l'api
  app:
    # build du container √† partir du dossier . au travers du dockerfile 'Dockerfile.dev'
    build:
      context: .
      dockerfile: Dockerfile

    command: sh -c "rsync -arv /usr/src/cache/node_modules/. /usr/src/app/node_modules && pnpm run dev"

    # Lier le port 3000 du container au port 3000 local
    ports:
      - 3000:3000

    # Nommer le container
    container_name: petfoster-api

    # D√©clarer que ce container depend du container 'petfoster-db', sous condition que celui-ci soit en √©tat "service_healthy"
    depends_on:
      petfoster-db:
        condition: service_healthy
    volumes:
      # mon r√©pertoire de travail perso, avec les sources
      # de mon appli est le r√©pertoire de travail
      # du conteneur
      - ./:/usr/src/app

    networks:
      - petfoster-net # üî• Associer PostgreSQL au r√©seau

  # Definir le container contenant la bdd
  petfoster-db:
    # √† partir de l'image dockerhub 'postgres'
    image: postgres
    container_name: petfoster-db

    # atteindre les variables d'environnement pour renseigner les information de connexion √† la bdd
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    # test pour verifier que la bdd soit pr√®te avant d'y relier notre api
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 2s
      timeout: 5s
      retries: 5

    restart: unless-stopped

    volumes:
      # copier le contenu du dossier ./data local (contenant nos scripts create_table et populate_table) dans un dossier du container pr√©vu pour lancer automatiquement ces scripts lors de l'initialisation du container
      - ./data:/docker-entrypoint-initdb.d/

      # volume permettant la persistance des donn√©es
      # - petfoster-volume:/var/lib/postgresql/data

    networks:
      - petfoster-net # üî• Associer PostgreSQL au r√©seau

volumes:
  petfoster-volume:

networks:
  petfoster-net:
